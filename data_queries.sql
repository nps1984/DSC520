/*	GETS RELEVENT MOVIES BASED ON TYPE, YEAR, VOTES
	JOINS TO OSCARS TABLE TO GET WINNERS
	RETURNS BASIC DETAILS FOR FILM
*/
SELECT	MI.TITLE_CONSTANT,
		MI.PRIMARY_TITLE,
		MI.START_YEAR,
		MI.RUNTIME_MINUTES,
		MI.GENRES,
		O.CATEGORY,
		O.NAME,
		CASE
			WHEN O.WIN IS NULL OR O.WIN = 'False'
			THEN 0
			ELSE 1
		END AS WIN,
		MI.AVERAGE_RATING,
		MI.NUMBER_VOTES
FROM	(	SELECT	T.TITLE_CONSTANT,
					T.PRIMARY_TITLE,
		 			T.START_YEAR,
					T.RUNTIME_MINUTES,
					T.GENRES,
					R.AVERAGE_RATING,
					R.NUMBER_VOTES
			FROM	TITLES T
			INNER JOIN
					RATINGS R
			ON		T.TITLE_CONSTANT = R.TITLE_CONSTANT
			AND		T.IS_ADULT = 0
			AND		T.TITLE_TYPE IN ('movie','short')
		 	AND		T.START_YEAR >= 1927
			AND		R.NUMBER_VOTES > 100
		) MI
LEFT JOIN
		OSCARS O
ON		LOWER(REGEXP_REPLACE(MI.PRIMARY_TITLE,'[[:punct:][:space:]]', '','g')) = LOWER(REGEXP_REPLACE(O.FILM,'[[:punct:][:space:]]', '','g'))
AND		MI.START_YEAR = O.YEAR_FILM
ORDER BY MI.TITLE_CONSTANT;


-- THIS WAS TESTING OUR JOIN. THIS RETURNS SEVERAL HUNDRED ROWS THAT DO NOT GET RETURNED BY OUR JOIN CONDITION. MOSTLY BECAUSE OF NAMING DIFFERENCES
SELECT	DISTINCT 
		NAME
FROM	OSCARS
EXCEPT
SELECT	DISTINCT 
		O.NAME
FROM	OSCARS O
INNER JOIN
		NAMES N
ON		O.NAME = N.PRIMARY_NAME;


-- TESTING REGEX IN A LIKE CLAUSE. 
SELECT	*
FROM	OSCARS
WHERE	FILM = 'The Social Network'
AND		LOWER(REGEXP_REPLACE(NAME,'[[:punct:][:space:]]', '','g')) ~* 'aaronsorkin';


-- CREATE TABLE OF NAMES VALUES THAT HAVE BEEN NOMINATED/WON AN OSCAR. THIS IS BEST GUESS BECAUSE OF DATA DIFFERENCES BETWEEN SOURCES 
CREATE TABLE NAMES_OSCARS
AS
SELECT	DISTINCT
		NI.NAME_CONSTANT,
		O.YEAR_FILM,
		CASE
			WHEN O.WIN IS NULL OR O.WIN = 'False'
			THEN 0
			ELSE 1
		END AS WIN
FROM	(
SELECT	DISTINCT
		N.NAME_CONSTANT,
		N.PRIMARY_NAME
FROM	TITLES T
INNER JOIN
		RATINGS R
ON		T.TITLE_CONSTANT = R.TITLE_CONSTANT
AND		T.IS_ADULT = 0
AND		T.TITLE_TYPE IN ('movie','short')
AND		T.START_YEAR >= 1927
AND		R.NUMBER_VOTES > 100
INNER JOIN
		PRINCIPALS P
ON		T.TITLE_CONSTANT = P.TITLE_CONSTANT
AND		P.CATEGORY IN ('writer','actor','actress','director')
INNER JOIN
		NAMES N
ON		P.NAME_CONSTANT = N.NAME_CONSTANT) NI
LEFT JOIN
		OSCARS O
ON		position(ni.primary_name in o.name) > 0;


-- THIS TELLS US IF A FILM'S CREW HAD ANY PRIOR OSCAR WINS. WILL HELP IN PREDICTING
SELECT	TITLE_CONSTANT,
		MAX(PRIOR_DIRECTOR_WIN) AS PRIOR_DIRECTOR_WIN,
		MAX(PRIOR_ACTOR_WIN) AS PRIOR_ACTOR_WIN,
		MAX(PRIOR_WRITER_WIN) AS PRIOR_WRITER_WIN,
		MAX(PRIOR_OTHER_WIN) AS PRIOR_OTHER_WIN
FROM (
SELECT	DISTINCT
		T.TITLE_CONSTANT,
		CASE
			WHEN	CATEGORY = 'director'
				AND	YEAR_FIRST_WIN IS NOT NULL
				AND	YEAR_FIRST_WIN < T.START_YEAR
			THEN
				1
			ELSE
				0
		END AS PRIOR_DIRECTOR_WIN,
		CASE
			WHEN	CATEGORY IN ('actor','actress')
				AND	YEAR_FIRST_WIN IS NOT NULL
				AND	YEAR_FIRST_WIN < T.START_YEAR
			THEN
				1
			ELSE
				0
		END AS PRIOR_ACTOR_WIN,
		CASE
			WHEN	CATEGORY = 'writer'
				AND	YEAR_FIRST_WIN IS NOT NULL
				AND	YEAR_FIRST_WIN < T.START_YEAR
			THEN
				1
			ELSE
				0
		END AS PRIOR_WRITER_WIN,
		CASE
			WHEN	CATEGORY NOT IN ('writer','actor','actress','director')
				AND	YEAR_FIRST_WIN IS NOT NULL
				AND	YEAR_FIRST_WIN < T.START_YEAR
			THEN
				1
			ELSE
				0
		END AS PRIOR_OTHER_WIN
FROM	TITLES T
INNER JOIN
		RATINGS R
ON		T.TITLE_CONSTANT = R.TITLE_CONSTANT
AND		T.IS_ADULT = 0
AND		T.TITLE_TYPE IN ('movie','short')
AND		T.START_YEAR >= 1927
AND		R.NUMBER_VOTES > 100
INNER JOIN
		PRINCIPALS P
ON		T.TITLE_CONSTANT = P.TITLE_CONSTANT
INNER JOIN
		NAMES_FIRST_OSCAR NFO
ON		P.NAME_CONSTANT = NFO.NAME_CONSTANT) A
GROUP BY TITLE_CONSTANT;



SELECT	DISTINCT
		MIO.PRIMARY_TITLE,
		MIO.GENRES,
		MIO.START_YEAR,
		MAX(MIO.WIN) OVER (PARTITION BY PRIMARY_TITLE) AS HAVE_WIN,
		MIO.AVERAGE_RATING,
		MIO.NUMBER_VOTES,
		MPI.TITLE_CONSTANT,
		MPI.PRIOR_DIRECTOR_WIN,
		MPI.PRIOR_ACTOR_WIN,
		MPI.PRIOR_WRITER_WIN,
		MPI.PRIOR_OTHER_WIN
FROM	(	/*	GETS RELEVENT MOVIES BASED ON TYPE, YEAR, VOTES
				JOINS TO OSCARS TABLE TO GET WINNERS
				RETURNS BASIC DETAILS FOR FILM
			*/
			SELECT	MI.TITLE_CONSTANT,
					MI.PRIMARY_TITLE,
					MI.START_YEAR,
					MI.RUNTIME_MINUTES,
					MI.GENRES,
					O.CATEGORY,
					O.NAME,
					CASE
						WHEN O.WIN IS NULL OR O.WIN = 'False'
						THEN 0
						ELSE 1
					END AS WIN,
					MI.AVERAGE_RATING,
					MI.NUMBER_VOTES
			FROM	(	SELECT	T.TITLE_CONSTANT,
								T.PRIMARY_TITLE,
								T.START_YEAR,
								T.RUNTIME_MINUTES,
								T.GENRES,
								R.AVERAGE_RATING,
								R.NUMBER_VOTES
						FROM	TITLES T
						INNER JOIN
								RATINGS R
						ON		T.TITLE_CONSTANT = R.TITLE_CONSTANT
						AND		T.IS_ADULT = 0
						AND		T.TITLE_TYPE IN ('movie','short')
						AND		T.START_YEAR >= 1927
						AND		R.NUMBER_VOTES > 100
					) MI
			LEFT JOIN
					OSCARS O
			ON		LOWER(REGEXP_REPLACE(MI.PRIMARY_TITLE,'[[:punct:][:space:]]', '','g')) = LOWER(REGEXP_REPLACE(O.FILM,'[[:punct:][:space:]]', '','g'))
			AND		MI.START_YEAR = O.YEAR_FILM
			ORDER BY MI.TITLE_CONSTANT
	) MIO
INNER JOIN
	(	SELECT	TITLE_CONSTANT,
				MAX(PRIOR_DIRECTOR_WIN) AS PRIOR_DIRECTOR_WIN,
				MAX(PRIOR_ACTOR_WIN) AS PRIOR_ACTOR_WIN,
				MAX(PRIOR_WRITER_WIN) AS PRIOR_WRITER_WIN,
				MAX(PRIOR_OTHER_WIN) AS PRIOR_OTHER_WIN
		FROM (
		SELECT	DISTINCT
				T.TITLE_CONSTANT,
				CASE
					WHEN	CATEGORY = 'director'
						AND	YEAR_FIRST_WIN IS NOT NULL
						AND	YEAR_FIRST_WIN < T.START_YEAR
					THEN
						1
					ELSE
						0
				END AS PRIOR_DIRECTOR_WIN,
				CASE
					WHEN	CATEGORY IN ('actor','actress')
						AND	YEAR_FIRST_WIN IS NOT NULL
						AND	YEAR_FIRST_WIN < T.START_YEAR
					THEN
						1
					ELSE
						0
				END AS PRIOR_ACTOR_WIN,
				CASE
					WHEN	CATEGORY = 'writer'
						AND	YEAR_FIRST_WIN IS NOT NULL
						AND	YEAR_FIRST_WIN < T.START_YEAR
					THEN
						1
					ELSE
						0
				END AS PRIOR_WRITER_WIN,
				CASE
					WHEN	CATEGORY NOT IN ('writer','actor','actress','director')
						AND	YEAR_FIRST_WIN IS NOT NULL
						AND	YEAR_FIRST_WIN < T.START_YEAR
					THEN
						1
					ELSE
						0
				END AS PRIOR_OTHER_WIN
		FROM	TITLES T
		INNER JOIN
				RATINGS R
		ON		T.TITLE_CONSTANT = R.TITLE_CONSTANT
		AND		T.IS_ADULT = 0
		AND		T.TITLE_TYPE IN ('movie','short')
		AND		T.START_YEAR >= 1927
		AND		R.NUMBER_VOTES > 100
		INNER JOIN
				PRINCIPALS P
		ON		T.TITLE_CONSTANT = P.TITLE_CONSTANT
		INNER JOIN
				NAMES_FIRST_OSCAR NFO
		ON		P.NAME_CONSTANT = NFO.NAME_CONSTANT) A
		GROUP BY TITLE_CONSTANT
	) MPI
ON	MIO.TITLE_CONSTANT = MPI.TITLE_CONSTANT;


